// Generated by CoffeeScript 1.10.0
(function() {
  var Boom, Joi, Promise, Url, _, synonymPath, uuid;

  Boom = require("boom");

  uuid = require("node-uuid");

  Joi = require("joi");

  Url = require("url");

  Promise = require('bluebird');

  _ = require("underscore");

  synonymPath = "synonym";

  exports.register = function(server, options, next) {
    var db;
    db = server.app.db;
    server.route({
      method: "GET",
      path: "/" + synonymPath + "/groups",
      handler: function(req, res) {
        return db.group.find({}, function(err, result) {
          if (err) {
            return res(Boom.wrap(err, "Internal MongoDB error"));
          }
          return res(result);
        });
      }
    });
    server.route({
      method: ["PUT", "DELETE"],
      path: "/" + synonymPath + "/groups/{id}",
      handler: function(req, res) {
        var findOpts, id, method;
        id = req.params.id;
        findOpts = {
          "id": id
        };
        method = req.raw.req.method;
        if (method === "PUT") {
          return db.group.update(findOpts, {
            $set: req.payload
          }, function(err, result) {
            if (err) {
              return res(Boom.wrap(err, "Internal MongoDB error"));
            }
            if (result.n === 0) {
              return res(Boom.notFound());
            }
            return res({
              "result": "success"
            });
          });
        } else {
          return db.group.remove(findOpts, function(err, result) {
            if (err) {
              return res(Boom.wrap(err, "Internal MongoDB error"));
            }
            if (result.n === 0) {
              return res(Boom.notFound());
            }
            return res({
              "result": "success"
            });
          });
        }
      }
    });
    server.route({
      method: ["GET", "POST"],
      path: "/" + synonymPath + "/groups/{gid}/cores",
      handler: function(req, res) {
        var findOpts, gid, method, postData, queryArgs, saveArr, search, taskLists, uri;
        gid = req.params.gid;
        findOpts = {
          "group_id": gid
        };
        method = req.raw.req.method;
        if (method === "GET") {
          uri = req.raw.req.url;
          queryArgs = Url.parse(uri, true).query;
          search = queryArgs.search || "*";
          if (search !== "*") {
            findOpts.id = search;
          }
          return db.core.find(findOpts, function(err, result) {
            var analogs, contains, resObj;
            if (err) {
              return res(Boom.wrap(err, "Internal MongoDB error"));
            }
            if (result.length !== 0) {
              contains = _.pluck(result, "id");
              analogs = _.union(_.flatten(_.pluck(result, "analogs")));
              resObj = {
                "existed": true,
                "contains": contains,
                "analogs": analogs
              };
              return res(resObj);
            } else {
              return res({
                "existed": false
              });
            }
          });
        } else {
          postData = req.payload;
          saveArr = _.map(postData, function(data) {
            return {
              "group_id": gid,
              "id": data
            };
          });
          taskLists = [];
          _.each(saveArr, function(arr) {
            var task;
            task = new Promise(function(reslove, reject) {
              return db.core.find(arr, function(err, result) {
                if (result.length > 0) {
                  return reslove("success");
                } else {
                  return db.core.save(arr, function(err, result) {
                    if (err) {
                      return reject("Internal MongoDB error");
                    } else {
                      return reslove("success");
                    }
                  });
                }
              });
            });
            return taskLists.push(task);
          });
          return Promise.all(taskLists).done(function() {
            console.log("success");
            res({
              "result": "success"
            });
          });
        }
      }
    });
    server.route({
      method: ["GET", "DELETE"],
      path: "/" + synonymPath + "/groups/{gid}/cores/{id}",
      handler: function(req, res) {
        var findOpts, gid, id, method;
        gid = req.params.gid;
        id = req.params.id;
        findOpts = {
          "group_id": gid,
          "id": id
        };
        method = req.raw.req.method;
        if (method === "GET") {
          return db.core.findOne(findOpts, function(err, result) {
            if (err) {
              return res(Boom.wrap(err, "Internal MongoDB error"));
            }
            return res(result);
          });
        } else {
          return db.core.remove(findOpts, function(err, result) {
            if (err) {
              return res(Boom.wrap(err, "Internal MongoDB error"));
            }
            if (result.n === 0) {
              return res(Boom.notFound());
            }
            return res({
              "result": "success"
            });
          });
        }
      }
    });
    server.route({
      method: ["GET", "POST"],
      path: "/" + synonymPath + "/groups/{gid}/analogs",
      handler: function(req, res) {
        var findOpts, gid, method, queryArgs, saveObj, search, uri;
        gid = req.params.gid;
        findOpts = {
          "group_id": gid
        };
        method = req.raw.req.method;
        if (method === "GET") {
          uri = req.raw.req.url;
          queryArgs = Url.parse(uri, true).query;
          search = queryArgs.search || "*";
          if (search !== "*") {
            findOpts.id = search;
          }
          return db.analog.find(findOpts, function(err, result) {
            if (err) {
              return res(Boom.wrap(err, "Internal MongoDB error"));
            }
            return res(result);
          });
        } else {
          saveObj = _.extend(findOpts, req.payload);
          return db.analog.save(saveObj, function(err, result) {
            if (err) {
              return res(Boom.wrap(err, "Internal MongoDB error"));
            }
            return res({
              "result": "success"
            });
          });
        }
      }
    });
    server.route({
      method: ["GET", "PUT", "DELETE"],
      path: "/" + synonymPath + "/groups/{gid}/analogs/{id}",
      handler: function(req, res) {
        var action, findOpts, gid, id, method, queryArgs, updateObj, uri;
        gid = req.params.gid;
        id = req.params.id;
        findOpts = {
          "group_id": gid,
          "id": id
        };
        method = req.raw.req.method;
        if (method === "GET") {
          return db.analog.findOne(findOpts, function(err, result) {
            if (err) {
              return res(Boom.wrap(err, "Internal MongoDB error"));
            }
            return res(result);
          });
        } else if (method === "PUT") {
          uri = req.raw.req.url;
          queryArgs = Url.parse(uri, true).query;
          action = queryArgs.action || "";
          if (action === "unlink") {
            updateObj = {
              cores: req.payload.core
            };
            return db.analog.update(findOpts, {
              $pull: updateObj
            }, function(err, result) {
              if (err) {
                return res(Boom.wrap(err, "Internal MongoDB error"));
              }
              if (result.n === 0) {
                return res(Boom.notFound());
              }
              db.analog.findOne(findOpts, function(err, result) {
                if (result.cores.length === 0) {
                  return db.analog.remove(findOpts);
                }
              });
              return res({
                "result": "success"
              });
            });
          } else {
            return res({
              "result": "success"
            });
          }
        } else {
          return db.analog.remove(findOpts, function(err, result) {
            if (err) {
              return res(Boom.wrap(err, "Internal MongoDB error"));
            }
            if (result.n === 0) {
              return res(Boom.notFound());
            }
            return res({
              "result": "success"
            });
          });
        }
      }
    });
    return next();
  };

  exports.register.attributes = {
    name: "routes-" + synonymPath
  };

}).call(this);
